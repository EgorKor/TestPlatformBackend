АСВТ-1
1. Классификация архитектур ЭВМ
+ Архитектура фон Неймана делит память на постоянную и временную. 
+ Гарвардская архитектура использует раздельную память для данных и команд.
- Архитектуры ЭВМ классифицируются только по числу процессоров. 
- RISC - архитектура с расширенным набором инструкций. 
+ Архитектура SISD подразумевает одну операцию над единственным потоком данных. 
+ Концепция MIMD - это обработка множества инструкций над множеством данных.
- Архитектура VLIW позволяет хранить только одну инструкцию в одной ячейке памяти. 
- Конвейерная обработка используется только в суперкомпьютерах. 
+ Архитектуры делятся на параллельные и последовательные. 
- Гарвардская архитектура не используется в современных микроконтроллерах. 
2. Неймановская ЭВМ.
+ Характерная особенность — единая память для данных и команд.
- Полностью исключает возможность выполнения циклов в программе. 
+ Применяется принцип программного управления. 
- Все команды выполняются параллельно. 
+ Основные элементы: память, процессор, устройство ввода-вывода. 
- Ввод и обработка данных происходят без участия процессора. 
+ Архитектура фон Неймана была предложена в 1945 году. 
- В Неймановской архитектуре отсутствует принцип конвейеризации. 
+ Связь между компонентами осуществляется через шины. 
- Программа и данные хранятся раздельно. 
3. Система команд.
- Система команд определяет, какие микропроцессоры можно использовать в системе. 
+ Команды могут быть арифметическими, логическими, ветвления. 
+ Мнемокоды используются для представления команд. 
- Код операции и операнды в системе команд всегда фиксированы по длине. 
+ RISC системы поддерживают минимальный набор команд. 
+ Система команд включает команды управления кэшем. 
- Все команды приспособлены только для прямого адресации памяти. 
+ Ассемблер преобразует команды в их машинный эквивалент. 
- Набор инструкций одинаков всегда для всех процессоров одного поколения. 
- Каждая команда состоит из трёх частей: кода операции, операндов и результата. 
4. Стандартный цикл выполнения команд.
+ Включает фазы выборки команды, декодирования и исполнения. 
- Команды выполняются асинхронно от тактов процессора. 
+ После выполнения команды происходит автоматический возврат в начало цикла. 
- Если команда работает с памятью, несколько операций выполняются одновременно. 
+ Декодирование команды разбирает операнды для выполнения. 
- Процессор может пропустить шаг декодирования, если команда проста. 
- В результате исполнения команды всегда обновляется регистр состояния. 
+ Тактовая частота напрямую влияет на быстродействие цикла. 
+ Выборка команды включает передачу инструкции из памяти в процессор через шину данных. 
+ Циклов может быть несколько одновременно в многоядерных процессорах. 
5. Организация шин в компьютере.
- Шина данных предназначена для передачи инструкций между процессором и памятью. 
+ Шина адреса односторонняя. 
- Шины разделяются на внешние, внутренние и обратные. 
+ Шина управления передаёт сигналы запросов и подтверждения. 
+ Чем больше разрядность шины адреса, тем больше устройств можно адресовать. 
+ Шина данных всегда полностью двунаправленная. 
+ Организация шин зависит от числа подключённых периферийных устройств. 
+ Используется принцип времённого мультиплексирования шин. 
- Устаревшие системы используют мультишины вместо одной совмещённой шины. 
- Шины могут быть только параллельными, последовательных шин не существует.
6. Структурная схема современного компьютера.
- Основные компоненты: процессор, память и система охлаждения. 
+ Используется шина данных, шина адреса и шина управления. 
- Запоминающее устройство разделяется на кэш и кэш-контроллер. 
+ Процессор включает в себя арифметико-логическое устройство и управляющее устройство.
- Графический процессор всегда интегрирован в центральный процессор. 
+ Модуль ввода-вывода управляет всеми внешними подключениями. 
- Память организована исключительно как блочная. 
- Кэш-память лежит на периферии центрального процессора. 
+ Системная шина соединяет все компоненты компьютера. 
- Современные компьютеры включают не менее трёх процессоров. 
7. Система ввода-вывода данных в компьютере.
- Осуществляет только ввод данных в систему. 
+ Включает драйверы устройств, контроллеры и каналы ввода-вывода.
+ Связана непосредственно с процессором путем прямого доступа к памяти (DMA). 
- Последовательные порты всегда быстрее параллельных. 
+ Включает управление прерываниями от периферийных устройств. 
+ USB является примером централизованной системы ввода-вывода. 
+ Концепция RAID относится к организации переноса данных на уровень ввода-вывода. 
- В современных системах отсутствует необходимость в механизме прерываний. 
- Интерфейсы ввода-вывода имеют фиксированную пропускную способность. 
- Ввод-вывод возможен только между устройствами различного рода. 
8. Конвейерное выполнение команд. Конфликты в конвейере. Типы конфликтов.
- Осуществляет только ввод данных в систему. 
+ Включает драйверы устройств, контроллеры и каналы ввода-вывода. 
+ Связана непосредственно с процессором путем прямого доступа к памяти (DMA). 
- Последовательные порты всегда быстрее параллельных. 
+ Включает управление прерываниями от периферийных устройств. 
+ USB является примером централизованной системы ввода-вывода. 
+ Концепция RAID относится к организации переноса данных на уровень ввода-вывода.
- В современных системах отсутствует необходимость в механизме прерываний. 
- Интерфейсы ввода-вывода имеют фиксированную пропускную способность. 
- Ввод-вывод возможен только между устройствами различного рода. 
9. Иерархическая организация памяти в компьютере. 
- Кэш-память — самый медленный уровень иерархии. 
+ SSD и HDD часто являются основным уровнем в иерархии. 
+ Память процессора быстрее оперативной памяти. 
- Латентность уменьшается с понижением уровня иерархии.
+ DRAM использует меньше энергии по сравнению с SRAM. 
+ Кэш L1 быстрее кэша L3. 
- Виртуальная память ускоряет доступ к данным. 
- Все уровни иерархии имеют одинаковый объем памяти. 
- Кэш-память располагается только на внешних устройствах. 
- Низкий уровень иерархии ближе к процессору. 
10. Адресная и ассоциативная память.
- Адресная память ищет данные по содержимому. 
+ Ассоциативная память быстрее, чем традиционная адресная память. 
+ Ассоциативная память нужна для кэширующего буфера. 
- Основное достоинство адресной памяти — связность. 
- Адресная память имеет преимущество в скорости при одинаковой емкости. 
- Ассоциативная память снижает потребление энергии. 
- Блоки памяти в адресной системе выделяются динамически. 
+ Ассоциативная память помогает при управлении кэшем. 
- Увеличение памяти всегда улучшает производительность системы. 
- Адресная память обычно дороже в производстве. 
11. Кэш-память. Типы кэш-памяти.
- Кэш-память предназначена для увеличения задержек в системе. 
+ Существует три уровня кэш-памяти: L1, L2, L3. 
- Кэш L1 — это самый медленный и самый объемный уровень. 
- Динамический кэш всегда быстрее статического. 
+ Кэш-память может находиться в процессоре и на материнской плате. 
+ Есть два типа кэша: данных и инструкций. 
+ L3 кэш всегда общедоступен для всех процессорных ядер. 
- Кэш-память генерирует дополнительное тепло, увеличивая вероятность перегрева. 
- Кэширование не применяется в системах реального времени. 
- В L2 кэш отображается только инструкции, а не данные. 
12. Проблема целостности данных в многоуровневой памяти.
- Изменения в одном уровне памяти автоматически обновляются на всех уровнях. 
- Целостность данных гарантируется только в одном уровне памяти. 
+ Проблемы целостности решают алгоритмы когерентности памяти. 
- Избыточность данных исключает проблемы целостности. 
- Использование временных файлов улучшает целостность данных. 
+ Процессоры с множеством ядер сталкиваются с большей проблемой целостности.
- Операции записи и чтения неизменно безопасны с точки зрения целостности. 
+ Протоколы памяти регулируют целостность данных в системах. 
- Все уровни иерархии памяти всегда согласованы между собой. 
- Программное обеспечение не влияет на целостность данных. 
13. Методы обеспечения когерентности данных.
- Когерентность обеспечивается только в одном уровне кэш-памяти. 
+ Модель памяти программно-аппаратная помогает улучшить когерентность. 
+ Использование замков — один из методов обеспечения когерентности. 
- Методы когерентности исключительно аппаратные. 
+ Протокол наблюдения за состоянием — ключевой метод обеспечения когерентности. 
- Когерентность автоматически обеспечивается корректной избыточностью кэширования.
+ Программная синхронизация помогает сохранять когерентность данных. 
- Когерентность данных гарантирована на уровне всех процессорных ядер. 
- Блокировка входа — специфический метод обеспечения когерентности. 
- Когерентность данных — это только проблема многопоточности. 
14. Протокол наблюдения MESI.
+ MESI — это протокол, обеспечивающий когерентность кэша. 
- Существует всего три состояния MESI. 
+ MESI расшифровывается как Modified, Exclusive, Shared, Invalid. 
- Exclusive состояние означает, что данные обновляются всеми процессорами. 
- Протокол MESI использует кэш-память только L1 уровня. 
+ Invalid состояние подразумевает, что данные неверны для дальнейшего использования. 
+ MESI поддерживает когерентность на уровне ядра. 
- MESI протокол может быть реализован только программно. 
+ Протокол MESI предназначен для улучшения быстродействия кэша. 
+ Shared состояние позволяет доступ ко всем ядрам одновременно.
15. Супер скалярная архитектура процессора.
- Суперскалярные процессоры выполняют одну инструкцию за такт. 
+ Параллельное выполнение увеличивает тепловыделение суперскалярного процессора.
+ Процессор имеет несколько исполнительных устройств для параллельности. 
- Суперскалярность улучшает координацию в монолитной архитектуре. 
- Адресная память используется для суперскалярной обработки. 
- Суперскалярный процессор отдельно выделен по тактам. 
- Архитектура устраняет все зависимости данных. 
+ Производительность суперскалярных процессоров зависит от предсказания ветвлений. 
+ Разрешение конфликтов — одна из задач суперскалярного процессора. 
- Контроль последовательности инструкций — не задача суперскалярной архитектуры. 
16. Выборка команд. Декодирование команд. Диспетчеризация и исполнение команд.
+ Выборка команд — это процесс изъятия команды из памяти. 
+ Декодирование команд преобразует их в машинные команды. 
+ Диспетчеризация команд передает их на исполнение процессором. 
- Исполнение команды всегда происходит одновременно с её выборкой. 
+ Все команды всегда декодируются прежде, чем будут выполнены. 
- Декодирование зависит от языка программирования. 
+ Выборка команд может происходить из кэш-памяти. 
- Диспетчеризация обеспечивает одновременное исполнение нескольких команд. 
- Исполнение команд включает только арифметические операции. 
+ Выборка команд осуществляется из оперативной памяти. 
17. Проблема переупорядочивания команд в супер скалярном процессоре.
- Переупорядочивание команд всегда улучшает производительность. 
+ Главная проблема переупорядочивания — нарушение последовательности данных. 
- Переупорядочивание команд происходит на уровне кэш-памяти. 
+ Аппаратные замирания устраняют проблемы переупорядочивания. 
- Последовательность выполнения программ никак не нарушается. 
- Конфликты данных неизбежны при любом переупорядочивании. 
+ Решение проблемы переупорядочивания — программная оптимизация. 
+ Все суперскалярные процессоры поддерживают переупорядочивание. 
- Переупорядочивание команд требует дополнительного оборудования. 
- Неупорядоченные команды всегда приводят к сбоям системы. 
18. Архитектуры процессоров фирмы Intel.
- Архитектура Intel Atom предназначена для высокопроизводительных серверов. 
+ Intel Core используется в настольных и мобильных устройствах. 
- Арнхитектура Celeron — флагманский процессор Intel. 
+ Xeon — процессоры для серверов и рабочих станций. 
- Pentium разработан для современных высокопроизводительных ПК. 
- Intel использует архитектуру ARM в своих процессорах. 
+ Архитектура Skylake — одна из последних архитектур Intel. 
- Hyper-Threading — технология, формирующая дополнительное физическое ядро процессора. 
+ К архитектуре Coffee Lake относится линейка Core i9. 
- Архитектуры Intel поддерживают интегрированную графику только в моделях Xeon. 
19. Многоядерные структуры.
+ Многоядерные процессоры содержат два или более процессорных ядер. 
- Все ядра многоядерного процессора всегда исполняют одну и ту же задачу. 
- Память в многоядерных архитектурах должна быть общей. 
- Ошибки одного ядра всегда приводят к сбою всего процессора. 
+ Многоядерные процессоры требуют более сложного программного обеспечения. 
+ Программное обеспечение должно быть специально написано для многоядерных систем, чтобы использовать их полностью. 
- Каждый драйвер управления ядром находится в отдельном процессорном ядре. 
+ Многозадачность существенно улучшается в многоядерной структуре. 
- Энергопотребление многопоточных процессоров всегда сильно увеличивается. 
- Многоядерные системы всегда превосходят одноядерные по производительности. 
20. Системная логика компьютера. Чипсеты.
+ Чипсет определяет функциональные возможности системной платы. 
+ Северный мост отвечает за коммуникацию с процессором и памятью. 
- Чипсеты не влияют на возможности обновления системы. 
- Южный мост обрабатывает высокоскоростные устройства. 
- Современные чипсеты всегда имеют интегрированную графику. 
+ В новых архитектурах северный и южный мосты заменены на один чип.
+ Чипсет управляет распределением питания между компонентами. 
- Все чипсеты поддерживают возможность разгона процессора. 
- Интегрированная аудиокарта всегда входит в чипсет. 
+ Совместимость компонентов системы полностью зависит от чипсета. 
21. Гиперпотоковая технология выполнения команд.
+ Гиперпотоковая технология (Hyper-Threading) позволяет одному ядру обрабатывать два потока одновременно. 
- Hyper-Threading фактически удваивает количество физических ядер в процессоре. 
+ Технология основана на перераспределении свободных ресурсов процессорного ядра.  
- Hyper-Threading поддерживается во всех процессорах Intel. 
- Гиперпотоковая технология всегда увеличивает производительность на 100%. 
+ Эффективность Hyper-Threading напрямую зависит от оптимизации программного обеспечения.
- Технология Hyper-Threading делит одно физическое ядро на четыре потока. 
+ Hyper-Threading активно применяется в серверных процессорах Intel Xeon. 
- Гиперпотоковая технология снижает энергопотребление процессора. 
- Hyper-Threading поддерживается как процессорами Intel, так и AMD. 
22. Графическая подсистема компьютера. Графический конвейер.
+ Графический конвейер обрабатывает графику поэтапно: моделирование, текстурирование и рендеринг.
- Графическая подсистема всегда включает интегрированную видеокарту.
- Графический конвейер работает только с 2D-графикой. 
+ Вершинные шейдеры обрабатывают геометрию объектов в графическом конвейере.
- Пиксельные шейдеры отвечают только за рендеринг теней. 
+ Современные графические конвейеры поддерживают параллельную обработку множества задач.
- Растровая графика не обрабатывается с помощью графических конвейеров. 
+ GPU работает по принципу параллелизма, обрабатывая тысячи потоков одновременно. 
- В графической подсистеме центральный процессор выполняет большинство работы. 
+ Режим трассировки лучей в графических конвейерах улучшает реалистичность изображения.
23. Графические процессоры. Технология CUDA.
- Графические процессоры (GPU) предназначены только для обработки 3D-графики.  
+ Технология CUDA создана компанией Nvidia для программирования на GPU.
+ CUDA позволяет запускать вычисления параллельно на GPU. 
+ AMD использует аналог технологии CUDA, называемый OpenCL.  
- CUDA поддерживает только программы на Python и C++. 
+ Графические процессоры включают в себя тысячи вычислительных ядер. 
- CUDA используется исключительно для программирования игр. 
+ Графические процессоры поддерживают многоуровневые кэш-памяти для ускорения расчетов. 
- CUDA позволяет запускать только стандартные функции, встроенные в видеокарту. 
+ GPU с поддержкой CUDA могут работать параллельно с CPU для масштабных вычислений. 
24. Устройства ввода-вывода данных.
+ Устройства ввода включают клавиатуру, мышь и сканеры. 
- Устройства вывода созданы только для визуализации данных. 
+ Принтеры и мониторы относятся к устройствам вывода. 
- Устройства ввода не зависят от операционной системы. 
- Микрофоны относятся к устройствам вывода. 
+ Сенсорные экраны могут работать как устройства ввода и вывода.
+ Геймпады относятся только к устройствам ввода. 
- Веб-камеры являются исключительно устройствами вывода. 
+ Интерфейс USB активно используется как для ввода, так и для вывода данных. 
- Жесткие диски относятся к устройствам ввода данных компьютера. 
25. Внешние запоминающие устройства. Магнитные диски. Оптические диски. Флеш-память.
- Магнитные диски характеризуются высокой скоростью доступа по сравнению с SSD. 
+ Оптические диски используют лазер для чтения и записи данных.
+ Флеш-память характеризуется высокой отказоустойчивостью и скоростью записи. 
+ Жесткие диски используют магнитное покрытие для хранения данных. 
- CD-ROM поддерживает перезапись данных. 
+ SSD является примером устройства на основе флеш-памяти. 
- Оптические диски имеют существенно большую емкость по сравнению с флеш-накопителями. 
+ Магнитные диски более подвержены механическим повреждениям. 
- Флеш-память не имеет ограничений по числу циклов записи и удаления. 
+ Blu-Ray диски способны хранить больше данных, чем DVD. 
26. Сетевые карты и методы. 
+ Сетевая карта позволяет физически подключить компьютер к сети. 
- Все сетевые карты поддерживают беспроводное соединение. 
+ Ethernet — это стандарт проводной связи для сетей. 
+ MAC-адрес используется для идентификации устройства в сети. 
- IPv4 имеет больше адресов, чем IPv6.  
+ Беспроводные сетевые карты используют частотный диапазон 5.8 ГГц. 
+ Сетевая карта не поддерживает работу без установленного драйвера. 
+ Методы маршрутизации данных включают RIP, OSPF и BGP.  
- Локальная сеть (LAN) поддерживает только проводные подключения. 
- Сетевые карты выполняют также функции межсетевых экранов.   